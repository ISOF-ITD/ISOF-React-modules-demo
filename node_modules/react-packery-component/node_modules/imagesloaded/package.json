{
  "_args": [
    [
      {
        "raw": "imagesloaded@git+https://github.com/eiriklv/imagesloaded.git",
        "scope": null,
        "escapedName": "imagesloaded",
        "name": "imagesloaded",
        "rawSpec": "git+https://github.com/eiriklv/imagesloaded.git",
        "spec": "git+https://github.com/eiriklv/imagesloaded.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:eiriklv/imagesloaded.git",
          "sshUrl": "git+ssh://git@github.com/eiriklv/imagesloaded.git",
          "httpsUrl": "git+https://github.com/eiriklv/imagesloaded.git",
          "gitUrl": "git://github.com/eiriklv/imagesloaded.git",
          "shortcut": "github:eiriklv/imagesloaded",
          "directUrl": "https://raw.githubusercontent.com/eiriklv/imagesloaded/master/package.json"
        }
      },
      "c:\\wamp\\www\\ISOF\\ISOF-React-modules-demo\\node_modules\\react-packery-component"
    ]
  ],
  "_from": "git+https://github.com/eiriklv/imagesloaded.git",
  "_id": "imagesloaded@3.1.8",
  "_inCache": true,
  "_location": "/react-packery-component/imagesloaded",
  "_phantomChildren": {},
  "_requested": {
    "raw": "imagesloaded@git+https://github.com/eiriklv/imagesloaded.git",
    "scope": null,
    "escapedName": "imagesloaded",
    "name": "imagesloaded",
    "rawSpec": "git+https://github.com/eiriklv/imagesloaded.git",
    "spec": "git+https://github.com/eiriklv/imagesloaded.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:eiriklv/imagesloaded.git",
      "sshUrl": "git+ssh://git@github.com/eiriklv/imagesloaded.git",
      "httpsUrl": "git+https://github.com/eiriklv/imagesloaded.git",
      "gitUrl": "git://github.com/eiriklv/imagesloaded.git",
      "shortcut": "github:eiriklv/imagesloaded",
      "directUrl": "https://raw.githubusercontent.com/eiriklv/imagesloaded/master/package.json"
    }
  },
  "_requiredBy": [
    "/react-packery-component"
  ],
  "_resolved": "git+https://github.com/eiriklv/imagesloaded.git#04535a148206e58790927e133f24ca199163b995",
  "_shasum": "0ef8319e059ac30fae8057e1a8c390ebcf6b06c0",
  "_shrinkwrap": null,
  "_spec": "imagesloaded@git+https://github.com/eiriklv/imagesloaded.git",
  "_where": "c:\\wamp\\www\\ISOF\\ISOF-React-modules-demo\\node_modules\\react-packery-component",
  "bugs": {
    "url": "https://github.com/desandro/imagesloaded/issues"
  },
  "dependencies": {
    "eventie": ">=1.0.4 <2",
    "wolfy87-eventemitter": "4.x"
  },
  "description": "You images done yet or what?",
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-uglify": "~0.1.2",
    "grunt-contrib-watch": "~0.3.1",
    "grunt-requirejs": "~0.4.0",
    "highlight.js": "~7.3.0",
    "marked": "~0.2.8"
  },
  "gitHead": "04535a148206e58790927e133f24ca199163b995",
  "homepage": "https://github.com/desandro/imagesloaded#readme",
  "keywords": [
    "images",
    "loaded",
    "ui"
  ],
  "license": "MIT",
  "main": "imagesloaded.js",
  "name": "imagesloaded",
  "optionalDependencies": {},
  "readme": "# imagesLoaded\r\n\r\n<p class=\"tagline\">JavaScript is all like \"You images done yet or what?\"</p>\r\n\r\n[imagesloaded.desandro.com](http://imagesloaded.desandro.com)\r\n\r\nDetect when images have been loaded.\r\n\r\n<!-- demo -->\r\n\r\n## Install\r\n\r\nGet a packaged source file:\r\n\r\n+ [imagesloaded.pkgd.min.js](http://imagesloaded.desandro.com/imagesloaded.pkgd.min.js)\r\n+ [imagesloaded.pkgd.js](http://imagesloaded.desandro.com/imagesloaded.pkgd.js)\r\n\r\nOr install via [Bower](http://bower.io): `bower install imagesloaded`\r\n\r\nOr install via npm: `npm install imagesloaded`\r\n\r\n## Usage\r\n\r\n``` js\r\nimagesLoaded( elem, callback )\r\n// you can use `new` if you like\r\nnew imagesLoaded( elem, callback )\r\n```\r\n\r\n+ `elem` _Element, NodeList, Array, or Selector String_\r\n+ `callback` _Function_ - function triggered after all images have been loaded\r\n\r\nUsing a callback function is the same as binding it to the `always` event (see below).\r\n\r\n``` js\r\n// element\r\nimagesLoaded( document.querySelector('#container'), function( instance ) {\r\n  console.log('all images are loaded');\r\n});\r\n// selector string\r\nimagesLoaded( '#container', function() {...});\r\n// multiple elements\r\nvar posts = document.querySelectorAll('.post');\r\nimagesLoaded( posts, function() {...});\r\n```\r\n\r\n\r\n## Events\r\n\r\nimagesLoaded is an Event Emitter. You can bind event listeners to events.\r\n\r\n``` js\r\nvar imgLoad = imagesLoaded( elem );\r\nfunction onAlways( instance ) {\r\n  console.log('all images are loaded');\r\n}\r\n// bind with .on()\r\nimgLoad.on( 'always', onAlways );\r\n// unbind with .off()\r\nimgLoad.off( 'always', onAlways );\r\n```\r\n\r\n### always\r\n\r\n``` js\r\nimgLoad.on( 'always', function( instance ) {\r\n  console.log('ALWAYS - all images have been loaded');\r\n});\r\n```\r\n\r\nTriggered after all images have been either loaded or confirmed broken.\r\n\r\n+ `instance` _imagesLoaded_ - the imagesLoaded instance\r\n\r\n### done\r\n\r\n``` js\r\nimgLoad.on( 'done', function( instance ) {\r\n  console.log('DONE  - all images have been successfully loaded');\r\n});\r\n```\r\n\r\nTriggered after all images have successfully loaded without any broken images.\r\n\r\n### fail\r\n\r\n``` js\r\nimgLoad.on( 'fail', function( instance ) {\r\n  console.log('FAIL - all images loaded, at least one is broken');\r\n});\r\n```\r\n\r\nTriggered after all images have been loaded with at least one broken image.\r\n\r\n### progress\r\n\r\n``` js\r\nimgLoad.on( 'progress', function( instance, image ) {\r\n  var result = image.isLoaded ? 'loaded' : 'broken';\r\n  console.log( 'image is ' + result + ' for ' + image.img.src );\r\n});\r\n```\r\n\r\nTriggered after each image has been loaded.\r\n\r\n+ `instance` _imagesLoaded_ - the imagesLoaded instance\r\n+ `image` _LoadingImage_ - the LoadingImage instance of the loaded image\r\n\r\n## Properties\r\n\r\n### LoadingImage.img\r\n\r\n_Image_ - The `img` element\r\n\r\n### LoadingImage.isLoaded\r\n\r\n_Boolean_ - `true` when the image has succesfully loaded\r\n\r\n### imagesLoaded.images\r\n\r\nArray of _LoadingImage_ instances for each image detected\r\n\r\n``` js\r\nvar imgLoad = imagesLoaded('#container');\r\nimgLoad.on( 'always', function() {\r\n  console.log( imgLoad.images.length + ' images loaded' );\r\n  // detect which image is broken\r\n  for ( var i = 0, len = imgLoad.images.length; i < len; i++ ) {\r\n    var image = imgLoad.images[i];\r\n    var result = image.isLoaded ? 'loaded' : 'broken';\r\n    console.log( 'image is ' + result + ' for ' + image.img.src );\r\n  }\r\n});\r\n```\r\n\r\n## jQuery\r\n\r\nIf you include jQuery, imagesLoaded can be used as a jQuery Plugin.\r\n\r\n``` js\r\n$('#container').imagesLoaded( function() {\r\n  // images have loaded\r\n});\r\n```\r\n\r\n### jQuery Deferred\r\n\r\nThe jQuery plugin returns a [jQuery Deferred object](http://api.jquery.com/category/deferred-object/). This allows you to use `.always()`, `.done()`, `.fail()` and `.progress()`, similarly to the emitted events.\r\n\r\n``` js\r\n$('#container').imagesLoaded()\r\n  .always( function( instance ) {\r\n    console.log('all images loaded');\r\n  })\r\n  .done( function( instance ) {\r\n    console.log('all images successfully loaded');\r\n  })\r\n  .fail( function() {\r\n    console.log('all images loaded, at least one is broken');\r\n  })\r\n  .progress( function( instance, image ) {\r\n    var result = image.isLoaded ? 'loaded' : 'broken';\r\n    console.log( 'image is ' + result + ' for ' + image.img.src );\r\n  });\r\n```\r\n\r\n## RequireJS\r\n\r\nimagesLoaded works with [RequireJS](http://requirejs.org).\r\n\r\nYou can require [imagesloaded.pkgd.js](http://imagesloaded.desandro.com/imagesloaded.pkgd.js).\r\n\r\n``` js\r\nrequirejs( [\r\n  'path/to/imagesloaded.pkgd.js',\r\n], function( imagesLoaded ) {\r\n  imagesLoaded( '#container', function() { ... });\r\n});\r\n```\r\n\r\nOr, you can manage dependencies with [Bower](http://bower.io). Set `baseUrl` to `bower_components` and set a path config for all your application code.\r\n\r\n``` js\r\nrequirejs.config({\r\n  baseUrl: 'bower_components/',\r\n  paths: { // path to your app\r\n    app: '../'\r\n  }\r\n});\r\n\r\nrequirejs( [\r\n  'imagesloaded/imagesloaded',\r\n  'app/my-component.js'\r\n], function( imagesLoaded, myComp ) {\r\n  imagesLoaded( '#container', function() { ... });\r\n});\r\n```\r\n\r\n## Contributors\r\n\r\nThis project has a [storied legacy](https://github.com/desandro/imagesloaded/graphs/contributors). Its current incarnation was developed by [Tomas Sardyha @Darsain](http://darsa.in/) and [David DeSandro @desandro](http://desandro.com).\r\n\r\n## MIT License\r\n\r\nimagesLoaded is released under the [MIT License](http://desandro.mit-license.org/). Have at it.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/desandro/imagesloaded.git"
  },
  "version": "3.1.8"
}
